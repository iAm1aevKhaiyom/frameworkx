import { parse } from "@microframework/parser"

describe("parse models > complex type app", () => {
  test("model with complex type", () => {
    const result = parse(__dirname + "/complex-type-app.ts")
    // console.log(JSON.stringify(result, undefined, 2))

    expect(result).toEqual({
      "@type": "ApplicationTypeMetadata",
      name: "App",
      description: "",
      actions: [],
      models: [
        {
          "@type": "TypeMetadata",
          kind: "object",
          array: false,
          nullable: false,
          canBeUndefined: false,
          properties: [
            {
              "@type": "TypeMetadata",
              kind: "number",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "id",
            },
            {
              "@type": "TypeMetadata",
              kind: "string",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "name",
              args: {
                "@type": "TypeMetadata",
                kind: "object",
                array: false,
                nullable: false,
                canBeUndefined: false,
                properties: [
                  {
                    "@type": "TypeMetadata",
                    kind: "string",
                    array: false,
                    nullable: false,
                    canBeUndefined: false,
                    properties: [],
                    propertyName: "keyword",
                  },
                ],
              },
            },
          ],
          modelName: "PostModel",
          description: "Type for a PostModel.",
        },
        {
          "@type": "TypeMetadata",
          kind: "object",
          array: false,
          nullable: false,
          canBeUndefined: false,
          properties: [
            {
              "@type": "TypeMetadata",
              kind: "number",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "id",
            },
            {
              "@type": "TypeMetadata",
              kind: "string",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "firstName",
            },
            {
              "@type": "TypeMetadata",
              kind: "string",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "lastName",
            },
            {
              "@type": "TypeMetadata",
              kind: "string",
              array: true,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "alternativeNames",
            },
            {
              "@type": "TypeMetadata",
              kind: "number",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "age",
            },
            {
              "@type": "TypeMetadata",
              kind: "boolean",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              propertyName: "isActive",
            },
            {
              "@type": "TypeMetadata",
              kind: "object",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [
                {
                  "@type": "TypeMetadata",
                  kind: "object",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [
                    {
                      "@type": "TypeMetadata",
                      kind: "string",
                      array: false,
                      nullable: false,
                      canBeUndefined: false,
                      properties: [],
                      propertyName: "name",
                    },
                    {
                      "@type": "TypeMetadata",
                      kind: "string",
                      array: false,
                      nullable: false,
                      canBeUndefined: false,
                      properties: [],
                      propertyName: "description",
                    },
                  ],
                  propertyName: "organization",
                },
                {
                  "@type": "TypeMetadata",
                  kind: "string",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [],
                  propertyName: "position",
                },
              ],
              propertyName: "career",
            },
            {
              "@type": "TypeMetadata",
              kind: "object",
              array: true,
              nullable: false,
              canBeUndefined: false,
              properties: [
                {
                  "@type": "TypeMetadata",
                  kind: "string",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [],
                  propertyName: "name",
                },
                {
                  "@type": "TypeMetadata",
                  kind: "number",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [],
                  propertyName: "from",
                },
                {
                  "@type": "TypeMetadata",
                  kind: "number",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [],
                  propertyName: "to",
                },
                {
                  "@type": "TypeMetadata",
                  kind: "string",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [],
                  propertyName: "degree",
                },
              ],
              propertyName: "educations",
            },
            {
              "@type": "TypeMetadata",
              kind: "object",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              typeName: "PhotoInterface",
              description: "This way we are testing interface support.",
              propertyName: "mainPhoto",
            },
            {
              "@type": "TypeMetadata",
              kind: "object",
              array: true,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              typeName: "PhotoInterface",
              description: "This way we are testing interface support.",
              propertyName: "photos",
            },
            {
              "@type": "TypeMetadata",
              kind: "model",
              array: true,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              modelName: "PostModel",
              propertyName: "posts",
            },
            {
              "@type": "TypeMetadata",
              kind: "object",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [],
              typeName: "Float",
              propertyName: "rating",
            },
            {
              "@type": "TypeMetadata",
              kind: "enum",
              array: false,
              nullable: false,
              canBeUndefined: false,
              properties: [
                {
                  "@type": "TypeMetadata",
                  kind: "object",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [],
                  propertyName: "active",
                  description: "",
                },
                {
                  "@type": "TypeMetadata",
                  kind: "object",
                  array: false,
                  nullable: false,
                  canBeUndefined: false,
                  properties: [],
                  propertyName: "inactive",
                  description: "",
                },
              ],
              typeName: "StatusEnum",
              description: "",
              propertyName: "status",
            },
          ],
          typeName: "PersonComplexType",
          description: "Complex type support test.",
        },
      ],
      inputs: [],
      queries: [],
      mutations: [],
      subscriptions: [],
    })
  })
})
